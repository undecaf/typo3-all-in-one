#!/bin/bash

#
# Controls execution and configuration of TYPO3 in a container
# ============================================================
#
# For help, run this script without any arguments.
#
# Copyright F. Kasper <fkasper@modus-operandi.at> 2019-2020
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# Constants
T3_IMAGE=undecaf/typo3-in-a-box
T3_ROOTDIR=/var/www/localhost
T3_DATADIR=/var/lib/typo3-db
CERT_BASENAME=/etc/ssl/apache2/custom
FILE_LIMIT='nofile=10000:15000'
RE_CONT_ENV='TIMEZONE|LANG|MODE|COMPOSER_EXCLUDE|PHP_.+'

# Bypass aliases
AWK=$(which awk)
BASENAME=$(which basename)
CAT=$(which cat)
DF=$(which df)
DIRNAME=$(which dirname)
GREP=$(which grep)
HOSTNAME=$(which hostname)
IFCONFIG=$(which ifconfig)
IP=$(which ip)
LS=$(which ls)
MKDIR=$(which mkdir)
PRINTENV=$(which printenv)
PS=$(which ps)
SLEEP=$(which sleep)
STAT=$(which stat)
SUDO=$(which sudo)
UNAME=$(which uname)


# --------------------------------------------------------------------------

# Returns success if this script runs under macOS (Darwin).
#
test_macos() {
    [ "$($UNAME)" = 'Darwin' ]
}


# --------------------------------------------------------------------------

# Returns success if this script runs under the specified shell.
#
# Arguments:
#   $1  basename of shell command
#
test_shell() {
    [ "$($BASENAME $($PS -p $$ -o comm=))" = "$1" ]
}


# --------------------------------------------------------------------------

# Restart this script under Zsh if running in (outdated) Bash in macOS
test_macos && test_shell 'bash' && exec zsh "$0" "$@"

# Set Bash and Zsh options for compatibility
if test_shell 'zsh'; then
    # Split parameters on whitespace
    setopt SH_WORD_SPLIT

    # Allow '@()', '*()' etc. for parenthesized globbing expressions
    setopt KSH_GLOB

    # Emulate Bash's regex behaviour
    setopt BASH_REMATCH
    setopt KSH_ARRAYS

    # Do not execute EXIT traps on exit from shell functions
    setopt POSIX_TRAPS

    # Echoes the first active local network IPv4 address (or nothing) to stdout
    host_ip() {
        $IFCONFIG -au inet 2>/dev/null | $AWK '$1 == "inet" { if( $2 !~ "127\." ) { print $2; exit } }' || true
    }

else
    # Allow '@()', '*()' etc. for parenthesized globbing expressions
    shopt -s extglob

    # Echoes the first active local network IPv4 address (or nothing) to stdout
    host_ip() {
        local RE='src +([[:digit:]\.]+)'
        [[ $($IP -4 route get 1.0.0.0 2>/dev/null) =~ $RE ]] && echo ${BASH_REMATCH[1]} || true
    }
fi


# ------------ What follows may not be parseable by macOS Bash -------------

# Shows $USAGE and an optional error message at stdout or stderr
# and exits with exit code 0 or 1, respectively.
#
# Arguments:
#   $1  (optional) error message: if specified then it is printed, and all
#       output is sent to stderr; otherwise $USAGE goes to stdout.
#
# Environment:
#   $USAGE   usage information; how to preserve linefeeds in $USAGE:
#       USAGE=$(cat <<EOT
#           ... multiline text ...
#       EOT
#       )
#
usage() {
    local REDIR=
    local EXIT_CODE=0

    if [ -n "$1" ]; then
        $CAT >&2 <<- EOT

*** $1 ***
EOT
        REDIR=">&2"
        EXIT_CODE=1
    fi

    eval 'echo "$USAGE" '$REDIR
    exit $EXIT_CODE
}


# --------------------------------------------------------------------------

# Shows a message at stderr and exits with the specified return status (or
# with 1).
#
# Arguments:
#   $1  error message
#   $2  (optional) return code, defaults to 1
#
err_exit() {
    echo '*** '"$1"' ***' >&2
    exit ${2:-1}
}


# --------------------------------------------------------------------------

# Compares two version numbers formatted as x[.y[.z]] and echoes a number
# <0, ==0 or >0 to stdout if the first one is less than, equal to or greater
# than the second one, respectively.
#
# Returns a non-zero status and does not echo anything if either number is
# ill-formatted.
#
# Arguments:
#   $1  first version number
#   $2  second version number
compare_versions() {
    local V1="$1".0.0
    local V2="$2".0.0
    local RE='([0-9]+)\.([0-9]+)\.([0-9]+)'

    [[ "$V1" =~ $RE ]] || return 1
    local MAJOR1=${BASH_REMATCH[1]}
    local MINOR1=${BASH_REMATCH[2]}
    local REV1=${BASH_REMATCH[3]}

    [[ "$V2" =~ $RE ]] || return 1
    local DIFF=$(( $MAJOR1 - ${BASH_REMATCH[1]} ))
    [ $DIFF -ne 0 ] || DIFF=$(( $MINOR1 - ${BASH_REMATCH[2]} ))
    [ $DIFF -ne 0 ] || DIFF=$(( $REV1 - ${BASH_REMATCH[3]} ))
    echo $DIFF
}


# --------------------------------------------------------------------------

# If the argument is a path (i.e. if it is not only a basename) then this
# creates it as a directory if necessary and echoes the absolute path to 
# stdout. Otherwise, the original argument is echoed.
#
# Arguments:
#   $1  path of a working directory, or a volume name
#
# Calls:
#   is_path
#   canonicalize
#
make_dir() {
    if is_path "$1"; then
        mkdir -p "$1"
        canonicalize "$1"
    else
        echo "$1"
    fi
}


# --------------------------------------------------------------------------

# Returns success iff the argument looks like a path (i.e. if it is not only 
# a basename).
#
# Arguments:
#   $1  path or basename
#
is_path() {
    [ "$1" != "$($BASENAME "$1")" ]
}


# --------------------------------------------------------------------------

# Canonicalizes a path and echoes it to stdout. This works even if the
# calling process does not have permission to access the rightmost path
# component.
#
# Arguments:
#   $1  path to canonicalize
#
canonicalize() {
    (
        cd "$(dirname "$1")"
        echo "$(pwd -P)/$($BASENAME "$1")"
    )
}


# --------------------------------------------------------------------------

# Autocompletes a string and echoes it to stdout. Echoes the original
# string if autocompletion could not be achieved.
#
# Arguments:
#   $1  string to autocomplete
#   $2, $3, ...
#       autocompleted strings
#
autocomplete() {
    local MATCHES=0
    local COMPLETED
    local ARG="$1"
    shift
    for AC in "$@"; do
        if [ "${AC##$ARG}" != "$AC" ]; then
            COMPLETED=$AC
            MATCHES=$((MATCHES+1))
        fi
    done

    # Consider autocompleted only if the abbreviation was unambiguous
    [ $MATCHES -eq 1 ] && echo "$COMPLETED" || echo "$ARG"
}


# --------------------------------------------------------------------------

# Returns success if the specified container exists.
#
# Arguments:
#   $1  container name
#
# Environment:
#   $T3_ENGINE
test_container() {
    $T3_ENGINE container inspect $1 &>/dev/null
}


# --------------------------------------------------------------------------

# Runs/execs the selected container engine with the given arguments.
# If T3_DEBUG is non-empty then the run command is echoed to stdout,
# and engine messages sent to stdout and stderr are visible at the
# console. Otherwise, only stderr is displayed at the console.
#
# Arguments:
#   $1, $2, ...
#       arguments to be passed to the container engine
#
# Environment:
#   $T3_ENGINE
#   $T3_DEBUG
#
run_engine() {
    if [ -n "$T3_DEBUG" ]; then
        echo "$T3_ENGINE $@"
        $T3_ENGINE "$@"
    else
        $T3_ENGINE "$@" >/dev/null
    fi
}

exec_engine() {
    [ -n "$T3_DEBUG" ] && echo "$T3_ENGINE $@"
    exec $T3_ENGINE "$@"
}


# --------------------------------------------------------------------------

# Autocomplete command
CMD=$(autocomplete "$1" run stop logs env composer shell)

[ $# -ge 1 ] && shift || true
OPT_COUNT=$#

# Determine command
[ -n "$CMD" ] && MSG="Unknown or ambiguous command: '$CMD'" || MSG="Missing command"

case "$CMD" in

    # Run TYPO3 in a container, optionally with a database in an extra container
    run)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT run [option]... [--] [Docker/Podman 'create' option]...
  $SCRIPT run [-h|--help]

Runs TYPO3 image 'undecaf/typo3-in-a-box' in a container in Docker or Podman.

Options (default values can be overridden by environment variables):

  --engine=ENGINE, -e ENGINE
      Container engine to use: 'docker', 'podman' (can be abbreviated) or an 
      absolute path to the engine executable.
      Default: \$T3_ENGINE, or 'podman' if installed, else 'docker'.

  --name=NAME, -n NAME
      Container name.
      Default: \$T3_NAME, or 'typo3'.

  --hostname=HOSTNAME, -H HOSTNAME
      Hostname assigned to the TYPO3 container and to Apache ServerName and
      ServerAdmin.
      Default: \$T3_HOSTNAME, or 'typo3.$($HOSTNAME)'.

  --tag=TAG, -T TAG
      Tag of image to run, consisting of TYPO3 version and build version,
      e.g. '8.7-1.3' or '9.5-latest'.
      Default: \$T3_TAG, or 'latest', i.e. the latest build for the most recent
      TYPO3 version.

  --pull, -u
      Pulls an up-to-date version of the image from the repository before
      running it.
      Default: \$T3_PULL, or not set.
      
  --composer-mode, -c
      If this option is present then Composer is responsible for installing/
      removing TYPO3 extensions. Otherwise, this is handled by the TYPO3
      Extension Manager.
      Default: \$T3_COMPOSER_MODE, or not set.
 
  --typo3-root=VOLUME, -v VOLUME
      Either a volume name to be mapped to the TYPO3 root directory inside the
      container, or a working directory path at the host (must contain a '/').
      Default: \$T3_ROOT, or 'typo3-root'.
 
  --typo3-owner, -o
      Indicates that the current user should appear as the owner of the TYPO3
      working directory (and its content) at the host.
      Default: \$T3_OWNER, or not set.
 
  --typo3-ports=HTTP,HTTPS, -p HTTP,HTTPS
      Host interfaces (optional) and ports where to publish the TYPO3 HTTP port
      and the TYPO3 HTTPS port. If one of the parts is omitted then the respective
      port will not be published. A leading comma is required if the HTTP part is
      omitted, e.g. ',127.0.0.1:8443'.
      Default: \$T3_PORTS, or '127.0.0.1:8080,127.0.0.1:8443'.

  --certfiles=PRIVATE-KEY,CERT, -k PRIVATE-KEY,CERT
      Private key file and certificate file for HTTPS, in PEM format and located
      at the host. If not specified then a self-signed certificate will be used
      for HTTPS connections.
      Default: \$T3_CERTFILES, or not set.

  --db-type=TYPE, -D TYPE
      Type of database to use: 'sqlite' or empty for SQLite, 'mariadb' for 
      MariaDB or 'postgresql' for PostgreSQL (can be abbreviated).
      Default: \$T3_DB_TYPE, or 'sqlite'.

  --db-vol=VOLUME, -V VOLUME
      Either a database volume name or a database working directory path at the 
      host (must contain a '/').
      Default: \$T3_DB_DATA, or 'typo3-data'.
 
  --db-owner, -O
      Indicates that the current user should appear as the owner of the database
      working directory (and its content) at the host.
      Default: \$T3_DB_OWNER, or not set.

  --db-port=PORT, -P PORT
      Host interface (optional) and port where to publish the database port;
      effective only for MariaDB and PostgreSQL.
      Defaults: \$T3_DB_PORT, or '127.0.0.1:3306' for MariaDB and '127.0.0.1:5432'
      for PostgreSQL.

  --env NAME=VALUE
      Sets the (initial) value of a container environment variable. Most variables
      can be changed afterwards by '$SCRIPT env'. This option may appear
      multiple times.
      Defaults: \$T3_TIMEZONE, \$T3_LANG, \$T3_MODE, \$T3_COMPOSER_EXCLUDE,
                \$T3_PHP_..., \$T3_php_...
 
  --logs, -l
      Streams the log output of the new TYPO3 instance to the console until 
      CTRL-C is typed.
      Default: \$T3_LOGS, or not set.
 
  --debug, -d
      If this option is present then Docker/Podman commands and output appear
      at the console. Otherwise only 'stderr' is displayed.
      Warning: your database credentials will be visible at the console.
      Default: \$T3_DEBUG, or not set.
 
  --help, -h
      Displays this text and exits.

Additional options for the Docker/Podman 'create' command can be added after the options
described above. If necessary, '--' can be used to separate them from the $SCRIPT options.
 
EOT
        )
        # No additional options required
        OPT_COUNT=1
        ;;


    # Stop and remove a TYPO3 container
    stop)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT stop [option]...
  $SCRIPT stop [-h|--help]

Stops a TYPO3 container, optionally removes it and unmounts the working
directories of this container.

Options (default values can be overridden by environment variables):

  --engine=ENGINE, -e ENGINE
      Container engine being used: 'docker', 'podman' or an absolute path
      to the engine executable.
      Default: \$T3_ENGINE, or 'podman' if installed, else 'docker'.

  --name=NAME, -n NAME
      Same container name as specified for 't3 run'.
      Default: \$T3_NAME, or 'typo3'.
 
  --debug, -d
      If this option is present then Docker/Podman commands and output appear
      at the console. Otherwise only 'stderr' is displayed.
      Default: \$T3_DEBUG, or not set.
 
  --rm, -R
      Causes the TYPO3 container to be removed after is was stopped.
      This can also be used to remove a container that is not running.

  --help, -h
      Displays this text and exits.
 
EOT
        )
        # No additional options required
        OPT_COUNT=1
        ;;


    # Display the log output of a running TYPO3 container
    logs)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT logs [option]...
  $SCRIPT logs [-h|--help]

Displays the log output of a running TYPO3 container.

Options (default values can be overridden by environment variables):

  --engine=ENGINE, -e ENGINE
      Container engine being used: 'docker', 'podman' or an absolute path
      to the engine executable.
      Default: \$T3_ENGINE, or 'podman' if installed, else 'docker'.

  --name=NAME, -n NAME
      Same container name as specified for 't3 run'.
      Default: \$T3_NAME, or 'typo3'.
 
  --follow, -f
      Streams the log output to the console until CTRL-C is typed.
      Default: \$T3_FOLLOW, or not set.
 
  --since=TIMESTAMP, -s TIMESTAMP
      Shows only log lines since a timestamp. This can be a Unix timestamp,
      a date formatted timestamp, or a Go duration string (e.g. 10m, 1h30m)
      computed relative to the client machine's time.
      Default: \$T3_SINCE, or not set.
 
  --tail=LINES, -l LINES
      Shows only that many lines from the end of the log, or all lines
      if 0.
      Default: \$T3_TAIL, or not set.

  --debug, -d
      If this option is present then Docker/Podman commands and output appear
      at the console. Otherwise only 'stderr' is displayed.
      Default: \$T3_DEBUG, or not set.

  --help, -h
      Displays this text and exits.
 
EOT
        )
        # No additional options required
        OPT_COUNT=1
        ;;


    # Change environment settings in a running TYPO3 container
    env)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT env [option]... [NAME=VALUE]...
  $SCRIPT env [-h|--help]

Modifies the environment of a running TYPO3 container. Shows the
current environment if no NAME=VALUE pairs are given.

Options (default values can be overridden by environment variables):

  --engine=ENGINE, -e ENGINE
      Container engine being used: 'docker', 'podman' or an absolute path
      to the engine executable.
      Default: \$T3_ENGINE, or 'podman' if installed, else 'docker'.

  --name=NAME, -n NAME
      Same container name as specified for 't3 run'.
      Default: \$T3_NAME, or 'typo3'.
 
  --debug, -d
      If this option is present then Docker/Podman commands and output appear
      at the console. Otherwise only 'stderr' is displayed.
      Default: \$T3_DEBUG, or not set.

  --help, -h
      Displays this text and exits.
 
EOT
        )
        # No additional options required
        OPT_COUNT=1
        ;;


    # Run Composer in a running TYPO3 container
    composer)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT composer [option]... COMPOSER_CMD [Composer option]...
  $SCRIPT composer [-h|--help]

Executes a Composer command inside of a running TYPO3 container.

Options (default values can be overridden by environment variables):

  --engine=ENGINE, -e ENGINE
      Container engine being used: 'docker', 'podman' or an absolute path
      to the engine executable.
      Default: \$T3_ENGINE, or 'podman' if installed, else 'docker'.

  --name=NAME, -n NAME
      Same container name as specified for 't3 run'.
      Default: \$T3_NAME, or 'typo3'.
 
  --debug, -d
      If this option is present then Docker/Podman commands and output appear
      at the console. Otherwise only 'stderr' is displayed.
      Default: \$T3_DEBUG, or not set.

  --help, -h
      Displays this text and exits.
 
EOT
        )
        ;;


    # Open an interactive Bash shell in a running TYPO3 container
    shell)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT shell [option]... [shell option]...
  $SCRIPT shell [-h|--help]

Opens an interactive Bash shell in a running TYPO3 container.

Options (default values can be overridden by environment variables):

  --engine=ENGINE, -e ENGINE
      Container engine being used: 'docker', 'podman' or an absolute path
      to the engine executable.
      Default: \$T3_ENGINE, or 'podman' if installed, else 'docker'.

  --name=NAME, -n NAME
      Same container name as specified for 't3 run'.
      Default: \$T3_NAME, or 'typo3'.
 
  --debug, -d
      If this option is present then Docker/Podman commands and output appear
      at the console. Otherwise only 'stderr' is displayed.
      Default: \$T3_DEBUG, or not set.

  --help, -h
      Displays this text and exits.
 
EOT
        )
        # No additional options required
        OPT_COUNT=1
        ;;


    # General help
    -h|--help)
        MSG=
        ;&


    # Unknown command
    *)
        USAGE=$($CAT <<EOT

Usage:
  $SCRIPT COMMAND [option]... [argument]...
 
Available commands:
 
  run           Runs TYPO3 image 'undecaf/typo3-in-a-box' in a container in Docker or
                Podman.
 
  stop          Stops a running TYPO3 container.

  logs          Displays the log output of a running TYPO3 container.
 
  env           Modifies the environment of a running TYPO3 container.

  composer      When in Composer Mode, executes a Composer command inside a 
                running TYPO3 container.

  shell         Opens an interactive Bash shell in a running TYPO3 container.

  --help, -h    Displays this text and exits. Displays command-specific help if 
                combined with a command.

Each command can be abbreviated to an unambiguous verb, e.g. '$SCRIPT stop' -> '$SCRIPT st'
 
EOT
        )
        usage "$MSG"
        ;;
esac


# --------------------------------------------------------------------------

# Process command line options

# Default options, overridden by environment variables
T3_ENGINE=${T3_ENGINE:-$(which podman)} || T3_ENGINE=docker
T3_NAME=${T3_NAME:-typo3}
T3_HOSTNAME=${T3_HOSTNAME:-typo3.$($HOSTNAME)}

T3_TAG=${T3_TAG:-latest}
T3_ROOT=${T3_ROOT:-typo3-root}
T3_PORTS=${T3_PORTS:-127.0.0.1:8080,127.0.0.1:8443}

REMOVE_OPTION=
FOLLOW_OPTION=${T3_FOLLOW:+--follow}
SINCE_OPTION=${T3_SINCE:+--since=$T3_SINCE}
TAIL_OPTION=${T3_TAIL:+--tail=$T3_TAIL}

while [ $# -gt 0 ]; do
    case $CMD:$1 in
        # Container engine
        *:@(-e|--engine))
            shift
            ;&

        *:--engine=*)
            T3_ENGINE="${1#--engine=}"  # basename or absolute path of an executable
            shift
            ;;

        # Pull (update) image before starting
        run:@(-u|--pull))
            T3_PULL=on
            shift
            ;;

        # Hostname
        run:@(-H|--hostname))
            shift
            ;&

        run:--hostname=*)
            T3_HOSTNAME="${1#--hostname=}"
            shift
            ;;

        # Container name
        @(run|stop|composer|shell|env):@(-n|--name))
            shift
            ;&

        @(run|stop|composer|shell|env):--name=*)
            T3_NAME="${1#--name=}"
            shift
            ;;

        # Composer Mode
        run:@(-c|--composer-mode))
            T3_COMPOSER_MODE=on
            shift
            ;;

        # Debug container engine commands
        @(run|stop|logs|composer|shell|env):@(-d|--debug))
            T3_DEBUG=on
            shift
            ;;

        # Image tag
        run:@(-T|--tag))
            shift
            ;&

        run:--tag=*)
            T3_TAG="${1#--tag=}"
            shift
            ;;

        # TYPO3 volume (volume name or working directory path)
        run:@(-v|--typo3-root))
            shift
            ;&

        run:--typo3-root=*)
            T3_ROOT="${1#--typo3-root=}"
            shift
            ;;

        # TYPO3 working directory owned by current user
        run:@(-o|--typo3-owner))
            T3_OWNER=on
            shift
            ;;

        # Database type
        run:@(-D|--db-type))
            shift
            ;&

        run:--db-type=*)
            T3_DB_TYPE="${1#--db-type=}"   # validated later
            shift
            ;;

        # Database volume (volume name or working directory path)
        run:@(-V|--db-data))
            shift
            ;&

        run:--db-data=*)
            T3_DB_DATA="${1#--db-data=}"
            shift
            ;;

        # Database working directory owned by current user
        run:@(-O|--db-owner))
            T3_DB_OWNER=on
            shift
            ;;

        # TYPO3 HTTP and HTTPS interfaces and ports
        run:@(-p|--typo3-ports))
            shift
            ;&

        run:--typo3-ports=*)
            T3_PORTS="${1#--typo3-ports=}"
            shift
            ;;

        # Private key file and certificate file
        run:@(-k|--certfiles))
            shift
            ;&

        run:--certfiles=*)
            T3_CERTFILES="${1#--certfiles=}"
            shift
            ;;

        # Database port
        run:@(-P|--db-port))
            shift
            ;&

        run:--db-port=*)
            T3_DB_PORT="${1#--db-port=}"
            shift
            ;;

        # Container environment setting
        run:--env)
            shift
            ;&

        run:--env=*)
            ENV="${1#--env=}"
            RE='^('$RE_CONT_ENV')=(.*)$'
            [[ "$ENV" =~ $RE ]] || err_exit "Not a valid NAME=VALUE pair: '$ENV'"
            export T3_${BASH_REMATCH[1]}=${BASH_REMATCH[2]}
            shift
            ;;

        # Stream log output to console at startup
        run:@(-l|--logs))
            T3_LOGS=on
            shift
            ;;

        # Stream log output to console
        logs:@(-f|--follow))
            FOLLOW_OPTION='--follow'
            shift
            ;;

        # Show only output since some timestamp
        logs:@(-s|--since))
            shift
            ;&

        logs:--since=*)
            SINCE_OPTION="--since=${1#--since=}"
            shift
            ;;

        # Show only a certain number of lines from the end of the log
        logs:@(-l|--tail))
            shift
            ;&

        logs:--tail=*)
            TAIL_OPTION="--tail=${1#--tail=}"
            shift
            ;;

        # Remove container(s) after being stopped
        stop:@(-R|--rm))
            REMOVE_OPTION='--rm'
            shift
            ;;

        # Help for selected command
        *:@(-h|--help))
            usage
            ;;

        # Separator from container engine options directory
        *:--)
            shift
            break
            ;;

        # First unknown option, keep remaining options in "$@"
        *)
            break
            ;;
    esac
done

# At least one (additional) argument must be present
[ $OPT_COUNT -eq 0 ] && err_exit 'No argument was found but at least one is required'


# --------------------------------------------------------------------------

# Set up the container environment
ENV_OPTIONS="--env T3_COMPOSER_MODE=$T3_COMPOSER_MODE "

# Determine container engine name
T3_ENGINE=$(autocomplete "$T3_ENGINE" docker podman)
[ -x "$(which $T3_ENGINE)" ] || err_exit "Container engine '$T3_ENGINE' not found"

T3_ENGINE=$(which $T3_ENGINE)
ENGINE_NAME=$($BASENAME $T3_ENGINE)
ENGINE_VERSION=$($T3_ENGINE --version)

# Options that differ between container engines
HOST_IP_ENV=
case $ENGINE_NAME in
    docker)
        SUDO_PREFIX=$SUDO
        ;;

    podman)
        # Obtain the first active local network IPv4 address
        # XDebug will not work if there is no active local IPv4 address
        HOST_IP=$(host_ip) && HOST_IP_ENV="--env HOST_IP=$HOST_IP"
        SUDO_PREFIX=
        ;;
esac

# Split into HTTP and HTTPS port and interface
RE='^(([^,]+)?(,(.+)?)?)?$'
[[ "$T3_PORTS" =~ $RE ]] || err_exit "Invalid option value: '$T3_PORTS'"
HTTP_PORT=${BASH_REMATCH[2]}
HTTPS_PORT=${BASH_REMATCH[4]}

HTTP_OPTIONS=
[ -n "$HTTP_PORT" ] && HTTP_OPTIONS="$HTTP_OPTIONS --publish $HTTP_PORT:80"
[ -n "$HTTPS_PORT" ] && HTTP_OPTIONS="$HTTP_OPTIONS --publish $HTTPS_PORT:443"

# Split into private key file and certificate file
RE='^((.+),(.+))?$'
[[ "$T3_CERTFILES" =~ $RE ]] || err_exit "Invalid option value: '$T3_CERTFILES'"
KEY_FILE=${BASH_REMATCH[2]}
CERT_FILE=${BASH_REMATCH[3]}

# Initialize container environment variables, keep the 'T3_' prefix
RE='^(T3_('$RE_CONT_ENV'))=(.*)$'

while read -r ENV_VAR; do
    if [[ "$ENV_VAR" =~ $RE ]]; then
        ENV_OPTIONS="$ENV_OPTIONS \
            --env ${BASH_REMATCH[1]}=${BASH_REMATCH[3]}"
    fi
done <<< "$($PRINTENV)"

# Database type-specific settings
T3_DB_TYPE=$(autocomplete "$T3_DB_TYPE" sqlite mariadb postgresql)
T3_DB_DATA=${T3_DB_DATA:-typo3-data}

ENV_OPTIONS="$ENV_OPTIONS \
    --env T3_DB_TYPE=${T3_DB_TYPE:-sqlite}"

case "$T3_DB_TYPE" in
    mariadb)
        DB_CONTAINER_PORT=3306
        ;;

    postgresql)
        DB_CONTAINER_PORT=5432
        ;;
esac

case "$T3_DB_TYPE" in
    mariadb|postgresql)
        T3_DB_PORT=${T3_DB_PORT:-127.0.0.1:$DB_CONTAINER_PORT}
        DB_PORT_OPTION="--publish $T3_DB_PORT:$DB_CONTAINER_PORT"
        ENV_OPTIONS="$ENV_OPTIONS \
            --env T3_DB_NAME=${T3_DB_NAME:-t3} \
            --env T3_DB_USER=${T3_DB_USER:-t3} \
            --env T3_DB_PW=${T3_DB_PW:-t3} \
            --env T3_DB_ROOT_PW=${T3_DB_ROOT_PW:-toor}"
        ;;

    sqlite|'')
        ! [[ "$T3_TAG" =~ ^8 ]] || err_exit "TYPO3 '$T3_TAG' does not support SQLite"
        T3_DB_PORT=
        DB_PORT_OPTION=
        ;;

    *)
        err_exit "Unknown database type: '$T3_DB_TYPE'"
        ;;
esac

# Process working directory ownership
if [ -n "$T3_OWNER" ]; then
    is_path "$T3_ROOT" || err_exit "Cannot own volume '$T3_ROOT': not bind-mounted"
    ENV_OPTIONS="$ENV_OPTIONS --env T3_OWNER=$T3_OWNER"
fi

if [ -n "$T3_DB_OWNER" ]; then
    is_path "$T3_DB_DATA" || err_exit "Cannot own volume '$T3_DB_DATA': not bind-mounted"
    ENV_OPTIONS="$ENV_OPTIONS --env T3_DB_OWNER=$T3_DB_OWNER"
fi

if [ -n "$T3_OWNER" -o -n "$T3_DB_OWNER" ]; then
    RE='\bpodman\b'
    if [[ "$T3_ENGINE" =~ $RE ]]; then
        # Podman containers need FUSE to control ownership
        ENV_OPTIONS="$ENV_OPTIONS --cap-add=SYS_ADMIN --device /dev/fuse"
    fi
fi


# --------------------------------------------------------------------------

# Execute command

case "$CMD" in

    run)
        # Verify that the container does not exist yet
        test_container "$T3_NAME" && \
            err_exit "Cannot run container '$T3_NAME': it already exists"$' ***\n*** '"To remove it, enter '$0 stop -e '$T3_ENGINE' -n '$T3_NAME' --rm'"

        # Roll back if command terminates prematurely
        trap "echo $'\n*** Command failed or interrupted, rolling back ***'; $0 stop -e '$T3_ENGINE' -n '$T3_NAME' --rm; exit 1" EXIT
        set -e

        # Update image if requested
        REPO=$T3_IMAGE${T3_TAG:+:$T3_TAG}
        if [ -n "$T3_PULL" ]; then
            echo '*** '"Pulling image '$REPO'"' ***'
            run_engine pull $REPO
        fi

        # Create working directories if necessary and make the paths absolute
        T3_ROOT=$(make_dir "$T3_ROOT")
        T3_DB_DATA=$(make_dir "$T3_DB_DATA")

        # Create the TYPO3 container
        echo '*** '"Creating container '$T3_NAME'"' ***'
        run_engine create \
            --name "$T3_NAME" \
            --hostname "$T3_HOSTNAME" \
            --ulimit $FILE_LIMIT \
            --volume "$T3_ROOT:$T3_ROOTDIR" \
            --volume "$T3_DB_DATA:$T3_DATADIR" \
            $HTTP_OPTIONS \
            $DB_PORT_OPTION \
            $ENV_OPTIONS \
            $HOST_IP_ENV \
            "$@" \
            $REPO

        # Copy certificate files, if any
        if [ -n "$T3_CERTFILES" ]; then
            run_engine cp "$KEY_FILE" "$T3_NAME":${CERT_BASENAME}.key
            run_engine cp "$CERT_FILE" "$T3_NAME":${CERT_BASENAME}.pem
        fi
        echo '*** '"Container '$T3_NAME' created"' ***'

        # Start the container
        run_engine start "$T3_NAME"
        echo '*** '"Container '$T3_NAME' started"' ***'

        trap - EXIT

        # Eventually show logs
        [ -n "$T3_LOGS" ] && exec_engine logs --follow "$T3_NAME" || true
        ;;


    stop)
        echo '*** '"Stopping container '$T3_NAME'"' ***'

        # Collect volume names from container
        # Note: prior to Podman v1.4.3, the volume name was contained in property .Source, not .Name
        [ $(compare_versions "$ENGINE_VERSION" '1.4.3') -ge 0 ] && NAME_PROP='.Name' || NAME_PROP='.Source'
        VOLNAMES=$($T3_ENGINE container inspect \
            --format='{{range .Mounts}}{{if eq .Destination "'$T3_ROOTDIR'" "'$T3_DATADIR'"}}{{printf "%s " '$NAME_PROP'}}{{end}}{{end}}' \
            "$T3_NAME" 2>/dev/null)

        # Stop and eventually remove the container
        #stop_container "$T3_NAME"
        if run_engine kill --signal SIGINT "$T3_NAME" && run_engine stop --time 5 "$T3_NAME"; then
            echo '*** '"Container '$T3_NAME' stopped"' ***'
        fi

        # Remove the container(s) if so requested
        [ -n "$REMOVE_OPTION" ] && run_engine container rm "$T3_NAME"

        # Wait until the container was removed eventually
        $SLEEP 1
        $T3_ENGINE container inspect "$T3_NAME" &>/dev/null || echo '*** '"Container '$T3_NAME' removed"' ***'
        ;;


    logs)
        exec_engine logs $FOLLOW_OPTION $SINCE_OPTION $TAIL_OPTION "$T3_NAME"
        ;;


    env)
        exec_engine exec "$T3_NAME" setenv $HOST_IP_ENV "$@"
        ;;


    composer)
        exec_engine exec "$T3_NAME" composer "$@"
        ;;


    shell)
        exec_engine exec -it "$T3_NAME" /bin/bash "$@"
        ;;

    *)
        err_exit "Unknown or ambiguous command: '$CMD'"
        ;;
esac
