#!/bin/bash

#
# (Re-)Configures Apache, PHP, XDebug and database
# and runs what was given as command line arguments
# =================================================
#
# This script is run by 't3 run' and is re-run by 't3' commands
# which could alter the container environment such as 't3 env'
# and 't3 composer'.
#
# Copyright F. Kasper <fkasper@modus-operandi.at> 2019
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# --------------------------------------------------------------------------

# Echoes the specified information of the server certificate to stdout.
#
# Arguments:
#   $1  'issuer' or 'subject'
#
cert_info() {
    openssl x509 -in $APACHE_CERT.pem -inform PEM -noout -$1 | awk -F ' = ' '{ print $2 }'
}


# --------------------------------------------------------------------------

# Returns success if the server certificate is self-signed.
#
test_self_signed() {
    test $(cert_info 'subject') = $(cert_info 'issuer')
}


# --------------------------------------------------------------------------

# Sends a message to syslog with priority $LOG_INFO and also to stdout if 
# not at the initial invocation.
#
log_info() {
    test $$ -ne 1 && echo "$1" || true
    logger -p $LOG_INFO "$1"
}


# --------------------------------------------------------------------------

# Sends a message to syslog with priority $LOG_ERROR and also to stderr if
# not at the initial invocation. Exits with the specified return status
# (or with 1).
#
err_exit() {
    test $$ -ne 1 && echo "$1" >&2 || true
    logger -p $LOG_ERROR "$1"
    exit ${2:-1}
}


# --------------------------------------------------------------------------

set -e

# Use the same environment as during build
. /etc/environment


# Initial invocation of this script (i.e. by 't3 run')?
if [ $$ -eq 1 ]; then
    # syslog to /dev/stdout so that the container engine can pick up the logs
    # and to localhost:514
    syslogd -O - -R 0.0.0.0:514 -L -n &

    # Log version info, trying to get the actual TYPO3 version from composer.lock
    RE='^([0-9]+\.){2,}[0-9]+'
    if CURRENT_TYPO3_VER=$(jq --raw-output '[.packages|.[]|{(.name): .version}]|add|."typo3/cms-core"' $TYPO3_ROOT/composer.lock 2>/dev/null) \
            && [[ "$CURRENT_TYPO3_VER" =~ $RE ]]; then
        TYPO3_VER=$CURRENT_TYPO3_VER
    fi

    log_info "TYPO3 ${TYPO3_VER}, container image tags: $DEPLOY_TAGS (created on $(date --reference ${TYPO3_ROOT} --rfc-2822))"
    log_info "Alpine Linux $(cat /etc/alpine-release)"
    log_info "$(httpd -v)"
    log_info "$(php --version)"

    # Get the values of container environment variables
    # as set by '--env T3_NAME=VALUE'
    RE='^(T3_('$RE_CONT_ENV'))=(.*)$'
    while read -r ENV_VAR; do
        if [[ $ENV_VAR =~ $RE ]]; then
            NAME=${BASH_REMATCH[2]}
            export $NAME=${BASH_REMATCH[3]}
        fi
    done <<< "$(printenv)"

    # Try to determine the local timezone if none was specified
    if [ -z "$T3_TIMEZONE" ]; then
        T3_TIMEZONE="$(curl -s https://ipapi.co/timezone)"
    fi

    # Use timezone if specified and supported
    if [ -n "$T3_TIMEZONE" -a -f "/usr/share/zoneinfo/${T3_TIMEZONE}" ]; then
        cp /usr/share/zoneinfo/${T3_TIMEZONE} /etc/localtime
        log_info "Timezone: $T3_TIMEZONE"
    else
        log_info "Timezone: UTC"
    fi

    # Show locale
    log_info "Locale: $LANG"

    # Disable the default SSL configuration in favor of the TYPO3 SSL configuration
    mv /etc/apache2/conf.d/ssl.conf /etc/apache2/conf.d/ssl.conf.disabled

    # Ensure that a private key file and a certificate file are available
    mkdir -p $(dirname $APACHE_CERT)

    if [ -f $APACHE_CUSTOM_CERT.key -a -f $APACHE_CUSTOM_CERT.pem ]; then
        # Link to existing custom certificate files
        chown $APACHE_USER: $APACHE_CUSTOM_CERT.{key,pem}
        chmod 600 $APACHE_CUSTOM_CERT.key
        chmod 644 $APACHE_CUSTOM_CERT.pem
        ln -sf $APACHE_CUSTOM_CERT.key $APACHE_CERT.key
        ln -sf $APACHE_CUSTOM_CERT.pem $APACHE_CERT.pem

        test_self_signed && SELF_SIGNED='self-signed ' || SELF_SIGNED=
        log_info "Using a ${SELF_SIGNED}custom SSL certificate, CN=$(cert_info 'subject')"

    else
        # Create a self-signed certificate for $HOSTNAME unless one already exists
        if [ -f $APACHE_CERT.key -a -f $APACHE_CERT.pem ] && [ "$(cert_info 'subject')" = "$HOSTNAME" ]; then
            log_info "Using existing SSL certificate, CN=$HOSTNAME"

        else
            # No certificate found that matches the current $HOSTNAME
            # Create certificate
            openssl genrsa -out \
                $APACHE_CERT.key 3072 \
                2>/dev/null
            openssl req -new -sha256 \
                -out $APACHE_CERT.csr \
                -key $APACHE_CERT.key \
                -subj "/CN=$HOSTNAME" \
                2>/dev/null
            openssl x509 -req -days 3653 \
                -in $APACHE_CERT.csr \
                -signkey $APACHE_CERT.key \
                -out $APACHE_CERT.pem -outform PEM \
                2>/dev/null
            rm $APACHE_CERT.csr

            chown $APACHE_USER: $APACHE_CERT.{key,pem}
            log_info "Created a self-signed SSL certificate, CN=$HOSTNAME"
        fi
    fi

    # Deactivate Composer Mode if so requested
    if [ -n "$T3_COMPOSER_MODE" ]; then
        if [ -f $TYPO3_ROOT/composer.json ] && \
                grep -q -E 'define *\( *'"'TYPO3_COMPOSER_MODE'"' *, *TRUE *\)' $TYPO3_ROOT/vendor/typo3/autoload-include.php; then
            log_info 'TYPO3 extensions have to be added/removed by Composer (Composer Mode)'

        else
            err_exit 'Cannot enable Composer Mode: it is already disabled in an existing volume'
        fi

    else
        sed -E \
            -e "s/define *\( *'TYPO3_COMPOSER_MODE' *, *TRUE *\) *;/define('TYPO3_COMPOSER_MODE', FALSE);/" \
            -i $TYPO3_ROOT/vendor/typo3/autoload-include.php
        rm -rf $TYPO3_ROOT/composer.* $APACHE_HOME/.composer
        log_info 'TYPO3 extensions have to be added/removed by the TYPO3 Extension Manager'
    fi
    
else
    # Script invoked by a command after 't3 run' such as 't3 env', 't3 composer'

    # Merge the previous state of the container environment variables
    # with what may have been specified in the current 't3' command
    RE='^(SAVED_('$RE_CONT_ENV'))=(.*)$'
    while read -r ENV_VAR; do
        if [[ $ENV_VAR =~ $RE ]]; then
            # Restore SAVED_$NAME only if $NAME is not set, not even to an empty value
            NAME=${BASH_REMATCH[2]}
            eval "test -z \${$NAME+x} && export $NAME=\$SAVED_$NAME || true"
        fi
    done <<< "$(printenv)"
fi

# Disable SSL stapling for self-signed certificates
test_self_signed && export STAPLING=Off || export STAPLING=On

# Select developer/XDebug/production mode, accept abbreviations and ignore case
while true; do
    if [[ -n $MODE && dev == ${MODE,,}* ]]; then
        log_info "Apache/TYPO3 in developer mode"
        EXT=dev
        XDEBUG=
        break
    fi

    if [[ -n $MODE && xdebug == ${MODE,,}* ]]; then
        log_info "Apache/TYPO3 in developer mode with XDebug support"
        EXT=dev
        XDEBUG=y
        break
    fi

    if [[ -z $MODE || prod == ${MODE,,}* ]]; then
        log_info "Apache/TYPO3 in production mode"
        EXT=prod
        XDEBUG=
        break
    fi

    err_exit "Unknown mode: '$MODE'"
done

ln -sf /etc/apache2/conf.d/mode.conf.${EXT} /etc/apache2/conf.d/mode.conf
ln -sf /etc/php7/mode.${EXT}.template /etc/php7/conf.d/zz_50_mode.ini

# Insert php.ini setting overrides
printenv \
    | awk -F '=' \
        -e 'BEGIN { IGNORECASE = 1 }' \
        -e '$1 ~ /^PHP_/ { gsub("^PHP_", "", $1); gsub(/"/, "\\\"", $2); printf "%s=\"%s\"\n", $1, $2; }' \
    > /etc/php7/conf.d/zz_99_overrides.ini

if [ -s /etc/php7/conf.d/zz_99_overrides.ini ]; then
    while read -r LINE; do
    	log_info "php.ini override: $LINE"
    done </etc/php7/conf.d/zz_99_overrides.ini
fi

# Enable/disable XDebug support
if [ -n "$XDEBUG" ]; then
    # Connect back only if host IP not specified
    export REMOTE_HOST=$HOST_IP
    test -n "$HOST_IP" && export REMOTE_CONNECT_BACK=0 || export REMOTE_CONNECT_BACK=1

	cat /etc/php7/xdebug.ini.template | envsubst > /etc/php7/conf.d/xdebug.ini
	log_info "XDebug enabled"
    while read -r LINE; do
        log_info "php.ini XDebug: $LINE"
    done < <(grep -E '^xdebug\.remote_(host|connect_back)=' /etc/php7/conf.d/xdebug.ini)

else
	truncate -s 0 /etc/php7/conf.d/xdebug.ini
	log_info "XDebug disabled"
fi

# root created missing paths for volumes also in $APACHE_HOME, therefore:
chown -R $APACHE_USER: $APACHE_HOME 

# Show the list of directories to be excluded from Composer operations
if [ -n "$COMPOSER_EXCLUDE" ]; then
    IFS=: read -ra DIRS <<< "$COMPOSER_EXCLUDE"
    for D in "${DIRS[@]}"; do
        log_info "Excluded from Composer: $D"
    done
fi

# Save the container environment state for the next invocation of this script
sed -E '/^ *export +SAVED_.+=/d' -i /etc/environment

RE='^('$RE_CONT_ENV')=(.*)$'
while read -r ENV_VAR; do
    if [[ $ENV_VAR =~ $RE ]]; then
        NAME=${BASH_REMATCH[1]}
        VALUE=${BASH_REMATCH[2]}
        VALUE=${VALUE//"'"/"'"\""'"\""'"}  # insert double-quotes around each single quote
        echo "export SAVED_$NAME='$VALUE'" >>/etc/environment
    fi
done <<< "$(printenv)"

# Start the database on the first run of this script
if [ $$ -eq 1 ]; then
    # Accept abbreviated database types, ignore case
    while true; do
        [[ -n $T3_DB_TYPE && mariadb == ${T3_DB_TYPE,,}* ]] && start_mysql && break
        [[ -n $T3_DB_TYPE && postgresql == ${T3_DB_TYPE,,}* ]] && start_pg && break
        [[ -z $T3_DB_TYPE || sqlite == ${T3_DB_TYPE,,}* ]] && start_sqlite && break

        err_exit "Unknown database type or startup failure: '$T3_DB_TYPE'"
    done
fi

# Execute Dockerfile CMD or command line, passing host signals to the exec'd process
exec "$@"
